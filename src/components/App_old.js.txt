import React from "react";
import SearchBar from "./SearchBar";
import "./App.css";
import DisplayData from "./DisplayData";
import Axios from "axios";

//TODO: Search by country.

export class App extends React.Component {
  state = {
    term: "",
    cityList: [],
    filteredList: [],
    currentCity: {},
    currentID: null,
    cityData: null,
    system: "metric",
  };

  getCities = () => {
    Axios.get(`./cities.json`).then((res) => {
      this.setState({ cityList: res.data });
    });
  };

  //Get user Location
  getUserLocation = () => {
    navigator.geolocation.getCurrentPosition((data) => {
      let { latitude, longitude } = data.coords;
      // Axios.get(
      //   `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&language=en&key=e258a1621b4a4b18a451e4ad5caac78b
      //  `
      // )
      //   .then((res) => {
      //     const cityName = res.data.results[0].components.city;
      //     const countryName = res.data.results[0].components.country;
      //     this.setState({
      //       currentCity: { city: cityName, country: countryName },
      //     });
      //   })
      //   .then(() => {
      //     this.setState({
      //       currentID: this.getID(
      //         this.state.currentCity.city,
      //         this.state.currentCity.country
      //       ),
      //     });
      //   })
      //   .then(() => {
      const KEY = `cbd584de8315da2675f82b2e428ce111`;
      const system = this.state.system;
      Axios.get(
        `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=${system}&appid=${KEY}`
      ).then((res) => {
        this.setState({ cityData: res.data });
      });
    });
  };

  //Get country ID
  getID = (cityName, countryName) => {
    let filtered = this.state.cityList.filter((city) => {
      if (city.name === cityName && city.country === countryName) {
        return city;
      }
    });

    return filtered[0].geonameid;
  };

  componentDidMount() {
    this.getCities();
    this.getUserLocation();
  }

  // Search event - dont need that
  onSearchSubmit = (term) => {
    this.setState({ term });
  };

  onInput = (term) => {
    this.setState({
      filteredList: this.state.cityList.filter((city) => {
        return city.name.includes(term) || city.country.includes(term)
          ? city
          : null;
      }),
    });
  };

  getSuggestionId = (id) => {
    this.setState({ currentID: id }, () => {
      this.fetchWeather(this.state.currentID);
    });
  };

  fetchWeather = (id) => {
    const KEY = `cbd584de8315da2675f82b2e428ce111`;
    const system = this.state.system;
    Axios.get(
      `https://api.openweathermap.org/data/2.5/weather?id=${id}&units=${system}&appid=${KEY}`
    ).then((res) => {
      this.setState({ cityData: res.data });
    });
  };

  render() {
    console.log(this.state);

    return (
      <div className="app">
        <div className="search-container">
          <SearchBar
            onSearchSubmit={this.onSearchSubmit}
            onInput={this.onInput}
            suggestions={this.state.filteredList}
            getSuggestionId={this.getSuggestionId}
          />
        </div>

        {/* Put cityData into prop from state after fetching */}
        <DisplayData cityData={this.state.cityData} />
      </div>
    );
  }
}

export default App;
